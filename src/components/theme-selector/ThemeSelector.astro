---
import { Icon } from "astro-icon/components";
---

<div class="theme-controls">
  <!-- Screen reader announcement for theme changes -->
  <div class="sr-only" role="status" aria-live="polite" id="themeAnnouncement">
  </div>

  <!-- Desktop: Always visible color picker -->
  <div
    class="theme-picker-desktop"
    role="group"
    aria-label="Color theme selector"
  >
    <button
      class="theme-button"
      data-theme="blue"
      aria-label="Select blue theme"
      aria-pressed="false"
      title="Blue"
    >
      <span class="color-swatch" style="background: #007db3;" aria-hidden="true"
      ></span>
    </button>
    <button
      class="theme-button"
      data-theme="pink"
      aria-label="Select pink theme"
      aria-pressed="false"
      title="Pink"
    >
      <span class="color-swatch" style="background: #DB2777;" aria-hidden="true"
      ></span>
    </button>
    <button
      class="theme-button"
      data-theme="green"
      aria-label="Select green theme"
      aria-pressed="false"
      title="Green"
    >
      <span class="color-swatch" style="background: #4C763B;" aria-hidden="true"
      ></span>
    </button>
    <button
      class="theme-button"
      data-theme="orange"
      aria-label="Select orange theme"
      aria-pressed="false"
      title="Orange"
    >
      <span class="color-swatch" style="background: #bf5700;" aria-hidden="true"
      ></span>
    </button>
    <button
      class="theme-button"
      data-theme="mono"
      aria-label="Select monochrome theme"
      aria-pressed="false"
      title="Monochrome"
    >
      <span class="color-swatch" style="background: #404040;" aria-hidden="true"
      ></span>
    </button>
    <button
      class="theme-button"
      data-theme="retro"
      aria-label="Select retro theme"
      aria-pressed="false"
      title="Retro"
    >
      <span class="color-swatch" style="background: linear-gradient(90deg, #134682 33%, #FEB216 33% 66%, #b31500 66%);" aria-hidden="true"
      ></span>
    </button>
  </div>

  <!-- Mobile: Dropdown color picker -->
  <details class="theme-dropdown">
    <summary class="theme-dropdown-button" aria-label="Open color theme menu">
      <Icon name="swatch" size={24} aria-hidden="true" />
    </summary>

    <div
      class="theme-picker-mobile"
      role="group"
      aria-label="Color theme selector"
    >
      <button
        class="theme-button"
        data-theme="blue"
        aria-label="Select blue theme"
        aria-pressed="false"
        title="Blue"
      >
        <span
          class="color-swatch"
          style="background: #007db3;"
          aria-hidden="true"></span>
      </button>
      <button
        class="theme-button"
        data-theme="pink"
        aria-label="Select pink theme"
        aria-pressed="false"
        title="Pink"
      >
        <span
          class="color-swatch"
          style="background: #DB2777;"
          aria-hidden="true"></span>
      </button>
      <button
        class="theme-button"
        data-theme="green"
        aria-label="Select green theme"
        aria-pressed="false"
        title="Green"
      >
        <span
          class="color-swatch"
          style="background: #4C763B;"
          aria-hidden="true"></span>
      </button>
      <button
        class="theme-button"
        data-theme="orange"
        aria-label="Select orange theme"
        aria-pressed="false"
        title="Orange"
      >
        <span
          class="color-swatch"
          style="background: #bf5700;"
          aria-hidden="true"></span>
      </button>
      <button
        class="theme-button"
        data-theme="mono"
        aria-label="Select monochrome theme"
        aria-pressed="false"
        title="Monochrome"
      >
        <span
          class="color-swatch"
          style="background: #404040;"
          aria-hidden="true"></span>
      </button>
      <button
        class="theme-button"
        data-theme="retro"
        aria-label="Select retro theme"
        aria-pressed="false"
        title="Retro"
      >
        <span
          class="color-swatch"
          style="background: linear-gradient(90deg, #134682 33%, #FEB216 33% 66%, #b31500 66%);"
          aria-hidden="true"
        ></span>
      </button>
    </div>
  </details>

  <button
    id="themeToggle"
    aria-label="Toggle light and dark mode"
    aria-pressed="false"
  >
    <svg
      width="24px"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      aria-hidden="true"
    >
      <path
        class="sun"
        fill-rule="evenodd"
        d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z"
      ></path>
      <path
        class="moon"
        fill-rule="evenodd"
        d="M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z"
      ></path>
    </svg>
  </button>
</div>

<script is:inline>
  // Initialize theme
  const initTheme = (() => {
    const savedTheme = localStorage?.getItem("colorTheme") || "blue";
    const savedMode = localStorage?.getItem("theme") || "";

    let mode = savedMode;
    if (!["dark", "light"].includes(mode)) {
      mode = window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    }

    // Apply theme
    document.documentElement.setAttribute("data-theme", savedTheme);
    if (mode === "dark") {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }

    localStorage.setItem("colorTheme", savedTheme);
    localStorage.setItem("theme", mode);

    return { theme: savedTheme, mode };
  })();

  // Announce to screen readers
  const announceTheme = (message) => {
    const announcement = document.getElementById("themeAnnouncement");
    if (announcement) {
      announcement.textContent = message;
      // Clear after announcement
      setTimeout(() => {
        announcement.textContent = "";
      }, 1000);
    }
  };

  // Toggle light/dark mode
  const handleToggleClick = () => {
    const element = document.documentElement;
    const toggleButton = document.getElementById("themeToggle");

    element.classList.toggle("dark");
    const isDark = element.classList.contains("dark");

    localStorage.setItem("theme", isDark ? "dark" : "light");

    // Update aria-pressed state
    if (toggleButton) {
      toggleButton.setAttribute("aria-pressed", isDark ? "true" : "false");
    }

    // Announce change
    announceTheme(`${isDark ? "Dark" : "Light"} mode activated`);
  };

  // Change color theme
  const handleThemeChange = (theme) => {
    document.documentElement.setAttribute("data-theme", theme);
    localStorage.setItem("colorTheme", theme);

    // Update active state and aria-pressed for both desktop and mobile buttons
    document.querySelectorAll(".theme-button").forEach((btn) => {
      const isActive = btn.dataset.theme === theme;
      btn.classList.toggle("active", isActive);
      btn.setAttribute("aria-pressed", isActive ? "true" : "false");
    });

    // Close dropdown after selection on mobile
    // const dropdown = document.querySelector(".theme-dropdown");
    // if (dropdown) {
    //   dropdown.removeAttribute("open");
    // }

    // Announce change
    const themeName = theme.charAt(0).toUpperCase() + theme.slice(1);
    announceTheme(`${themeName} theme selected`);
  };

  // Event listeners
  const themeToggle = document.getElementById("themeToggle");
  if (themeToggle) {
    themeToggle.addEventListener("click", handleToggleClick);
    // Set initial aria-pressed state
    const isDark = document.documentElement.classList.contains("dark");
    themeToggle.setAttribute("aria-pressed", isDark ? "true" : "false");
  }

  // Add listeners to all theme buttons (both desktop and mobile)
  document.querySelectorAll(".theme-button").forEach((button) => {
    button.addEventListener("click", () => {
      handleThemeChange(button.dataset.theme);
    });

    // Set initial active state and aria-pressed
    const isActive = button.dataset.theme === initTheme.theme;
    if (isActive) {
      button.classList.add("active");
      button.setAttribute("aria-pressed", "true");
    }
  });

  // Close dropdown when clicking outside
  document.addEventListener("click", (event) => {
    const dropdown = document.querySelector(".theme-dropdown");
    if (dropdown && dropdown.hasAttribute("open")) {
      if (!dropdown.contains(event.target)) {
        dropdown.removeAttribute("open");
      }
    }
  });

  // Handle Escape key to close dropdown
  document.addEventListener("keydown", (event) => {
    if (event.key === "Escape") {
      const dropdown = document.querySelector(".theme-dropdown");
      if (dropdown && dropdown.hasAttribute("open")) {
        dropdown.removeAttribute("open");
      }
    }
  });

  // System preference listener
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", (e) => {
      const newTheme = e.matches ? "dark" : "light";
      if (localStorage.getItem("theme") !== newTheme) {
        document.documentElement.classList.toggle("dark", e.matches);
        localStorage.setItem("theme", newTheme);

        // Update toggle button state
        const toggleButton = document.getElementById("themeToggle");
        if (toggleButton) {
          toggleButton.setAttribute(
            "aria-pressed",
            e.matches ? "true" : "false"
          );
        }
      }
    });
</script>

<style>
  /* Screen reader only content */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  .theme-controls {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  #themeToggle {
    border: 0;
    background: none;
    border-radius: 50%;
    padding: 0.5rem;
    transition: background-color 0.25s;
    cursor: pointer;
  }

  #themeToggle:hover {
    background-color: rgba(var(--ambience-color), 1);
  }

  #themeToggle:active {
    opacity: 0.75;
  }

  #themeToggle:focus-visible {
    outline: 2px dashed rgba(var(--secondary-color), 1);
    outline-offset: 2px;
  }

  .sun {
    fill: rgba(var(--primary-color), 1);
  }
  .moon {
    fill: transparent;
  }

  :global(.dark) .sun {
    fill: transparent;
  }
  :global(.dark) .moon {
    fill: rgba(var(--primary-color), 1);
  }

  /* Desktop Color Picker - Always Visible */
  .theme-picker-desktop {
    display: none;
    gap: 0.5rem;
    padding-block: 0.5rem;
    padding-inline: 0.5rem;
    background-color: rgba(var(--floating-color), 0.7);
    border-radius: 25px;
  }

  /* Show desktop picker on larger screens */
  @media (min-width: 1000px) {
    .theme-picker-desktop {
      display: flex;
    }
  }

  /* Mobile Dropdown Styles */
  .theme-dropdown {
    position: relative;
    display: block;
  }

  /* Hide dropdown on desktop */
  @media (min-width: 1000px) {
    .theme-dropdown {
      display: none;
    }
  }

  .theme-dropdown-button {
    list-style: none;
    cursor: pointer;
    border: 0;
    background: none;
    border-radius: 50%;
    padding: 0.5rem;
    transition: background-color 0.25s;
    display: flex;
    align-items: center;
    justify-content: center;
    color: rgba(var(--primary-color), 1);
  }

  .theme-dropdown-button:hover {
    background-color: rgba(var(--ambience-color), 1);
  }

  .theme-dropdown-button:focus-visible {
    outline: 2px dashed rgba(var(--secondary-color), 1);
    outline-offset: 2px;
  }

  .theme-dropdown-button::-webkit-details-marker {
    display: none;
  }

  .theme-picker-mobile {
    position: absolute;
    inset-block-start: calc(100% + 1.5rem);
    inset-inline-end: 0rem;
    display: flex;
    gap: 0.5rem;
    padding-block: 0.5rem;
    padding-inline: 0.5rem;
    background-color: rgba(var(--floating-color), 0.8);
    border-radius: 25px;
    box-shadow: 0 0px 12px rgba(var(--shadow-color));
    z-index: 100;
    backdrop-filter: blur(10px);
  }

  /* Shared Button Styles */
  .theme-button {
    border: 2px solid transparent;
    background: none;
    padding: 0.25rem;
    border-radius: 25px;
    cursor: pointer;
    transition: border-color 0.25s;
  }

  .theme-button:hover {
    border-color: rgba(var(--primary-color), 0.5);
  }

  .theme-button.active,
  .theme-button[aria-pressed="true"] {
    border-color: rgba(var(--primary-color), 1);
  }

  .theme-button:focus-visible {
    outline: 2px dashed rgba(var(--secondary-color), 1);
    outline-offset: 2px;
  }

  .color-swatch {
    display: block;
    width: 24px;
    height: 24px;
    border-radius: 25px;
  }

  /* Close dropdown when not open */
  .theme-dropdown:not([open]) .theme-picker-mobile {
    display: none;
  }
</style>
